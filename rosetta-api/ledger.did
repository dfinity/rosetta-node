type ICPTs = record {
     doms : nat64;
};

type BlockHeight = nat64;
type Certification = nat64;
type Memo = nat64;
type SystemTime = nat64;
type SubAccount = opt vec nat8;

type Block = record {
    transaction: Transaction;
    timestamp: SystemTime;
};

type Transfer = variant {
    Burn: record {
        from: principal;
        amount: ICPTs;
    };
    Mint: record {
        to: principal;
        amount: ICPTs;
    };
    Send: record {
        from: principal;
        to: principal;
        amount: ICPTs;
    };
};

type Transaction = record {
    transfer: Transfer;
    memo: Memo;
    created_at: BlockHeight;
};

type SendArgs = record {
    memo: Memo;
    amount: ICPTs;
    fee: ICPTs;
    from_subaccount: SubAccount;
    to: principal;
    to_subaccount: SubAccount;
    block_height: opt BlockHeight;
};

type NotifyCanisterArgs = record {
    block_height: BlockHeight;
    max_fee: ICPTs;
    from_subaccount: SubAccount;
    to_canister: principal;
    to_subaccount: SubAccount;
};

type AccountBalanceArgs = record {
    account: principal;
    sub_account: SubAccount;
};

type TotalSupplyArgs = record {};

type LedgerCanisterInitPayload = record {
    minting_account: principal;
    initial_values: vec record {0:principal; 1: ICPTs};
    archive_canister: opt principal;
    max_message_size_bytes: opt nat32;
}

service: (LedgerCanisterInitPayload) -> {
  send : (SendArgs) -> (nat64);
  notify: (NotifyCanisterArgs) -> ();
  account_balance : (AccountBalanceArgs) -> (ICPTs) query;
  supply: (TotalSupplyArgs) -> (ICPTs) query;
  tip_of_chain : () -> (Certification, BlockHeight) query;
  block : (BlockHeight) -> (opt Block) query;
}
