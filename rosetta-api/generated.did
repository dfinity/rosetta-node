type AccountBalanceArgs = record { account : vec nat8 };
type AccountBalanceDfxArgs = record { account : text };
type ArchiveOptions = record {
  num_blocks_to_archive : nat64;
  trigger_threshold : nat64;
  max_message_size_bytes : opt nat64;
  node_max_memory_size_bytes : opt nat64;
  controller_id : principal;
};
type Duration = record { secs : nat64; nanos : nat32 };
type ICPTs = record { e8s : nat64 };
type LedgerCanisterInitPayload = record {
  send_whitelist : vec principal;
  minting_account : text;
  transaction_window : opt Duration;
  max_message_size_bytes : opt nat64;
  archive_options : opt ArchiveOptions;
  initial_values : vec record { text; ICPTs };
};
type NotifyCanisterArgs = record {
  to_subaccount : opt vec nat8;
  from_subaccount : opt vec nat8;
  to_canister : principal;
  max_fee : ICPTs;
  block_height : nat64;
};
type NotifyError = variant {
  TxTooOld : record { allowed_window : Duration };
  AlreadyNotified;
  BadTxType;
  RejectTruncated : int32;
  FailedToFetchBlock : text;
  Rejected : record { int32; text };
  BlockNotFound;
  ResponseTruncated;
};
type Result = variant { Ok : vec nat8; Err : NotifyError };
type Result_1 = variant { Ok : nat64; Err : SendError };
type SendArgs = record {
  to : text;
  fee : ICPTs;
  memo : nat64;
  from_subaccount : opt vec nat8;
  created_at_time : opt TimeStamp;
  amount : ICPTs;
};
type SendError = variant { BadFee : record { expected_fee : ICPTs } };
type TimeStamp = record { timestamp_nanos : nat64 };
service : (LedgerCanisterInitPayload) -> {
  account_balance : (AccountBalanceArgs) -> (ICPTs) query;
  account_balance_dfx : (AccountBalanceDfxArgs) -> (ICPTs) query;
  notify : (NotifyCanisterArgs) -> (Result);
  notify_dfx : (NotifyCanisterArgs) -> ();
  send : (SendArgs) -> (Result_1);
  send_dfx : (SendArgs) -> (nat64);
}
