syntax = "proto3";
package state.canister_state_bits.v1;
import "types/v1/types.proto";
import "state/queues/v1/queues.proto";

message CallContext {
  message Ingress {
    types.v1.UserId user_id = 1;
    bytes message_id = 2;
  }
  message CanisterUpdateOrQuery {
    types.v1.CanisterId canister_id = 1;
    uint64 callback_id = 2;
  }
  message Heartbeat { }

  oneof call_origin {
    Ingress ingress = 1;
    CanisterUpdateOrQuery canister_update = 2;
    types.v1.UserId query = 3;
    CanisterUpdateOrQuery canister_query = 4;
    Heartbeat heartbeat = 7;
  }
  bool responded = 5;
  state.queues.v1.Funds available_funds = 6;
  bool deleted = 8;
}

message CallContextEntry {
  uint64 call_context_id = 1;
  CallContext call_context = 2;
}

message WasmClosure {
  uint32 func_idx = 1;
  uint32 env = 2;
}

message Callback {
  uint64 call_context_id = 1;
  WasmClosure on_reply = 2;
  WasmClosure on_reject = 3;
  WasmClosure on_cleanup = 4;
  state.queues.v1.Cycles cycles_sent = 5;
}

message CallbackEntry {
  uint64 callback_id = 1;
  Callback callback = 2;
}

message CallContextManager {
  uint64 next_call_context_id = 1;
  uint64 next_callback_id = 2;
  repeated CallContextEntry call_contexts = 3;
  repeated CallbackEntry callbacks = 4;
}

message CyclesAccount {
  // Cycle balance is store as u128::to_bytes_le()
  bytes cycles_balance = 1;
  reserved 2;
  reserved "max_exec_cycles";
}

message Global {
  oneof global {
    int32 i32 = 1;
    int64 i64 = 2;
    float f32 = 3;
    double f64 = 4;
  }
}

message WasmMethod {
  enum SystemMethod {
    SYSTEM_METHOD_UNSPECIFIED = 0;
    SYSTEM_METHOD_CANISTER_START = 1;
    SYSTEM_METHOD_CANISTER_INIT = 2;
    SYSTEM_METHOD_CANISTER_PRE_UPGRADE = 3;
    SYSTEM_METHOD_CANISTER_POST_UPGRADE = 4;
    SYSTEM_METHOD_CANISTER_INSPECT_MESSAGE = 5;
    SYSTEM_METHOD_CANISTER_HEARTBEAT = 6;
    SYSTEM_METHOD_EMPTY = 7;
  }
  oneof wasm_method {
    string update = 1;
    string query = 2;
    SystemMethod system = 3;
  }
}

message ExecutionStateBits {
  repeated Global exported_globals = 1;
  uint32 heap_size = 2;
  repeated WasmMethod exports = 3;
  uint64 last_executed_round = 4;
}

message StopCanisterContext {
  message Ingress {
    types.v1.UserId sender = 1;
    bytes message_id = 2;
  }

  message Canister {
    types.v1.CanisterId sender = 1;
    uint64 reply_callback = 2;
    state.queues.v1.Funds funds = 3;
  }

  oneof context {
    Ingress ingress = 1;
    Canister canister = 2;
  }
}

message CanisterStatusRunning { CallContextManager call_context_manager = 1; }

message CanisterStatusStopping {
  CallContextManager call_context_manager = 1;
  repeated StopCanisterContext stop_contexts = 2;
}

message CanisterStatusStopped {}

message CanisterStateBits {
  // This field is now deprecated. Once all subnets in production contain the
  // new version of this field, we can remove it (and mark it as reserved).
  types.v1.PrincipalId controller = 1;
  uint64 last_full_execution_round = 2;
  CallContextManager call_context_manager = 3;
  uint64 compute_allocation = 4;
  int64 accumulated_priority = 5;
  reserved 6;
  reserved "query_allocation";
  ExecutionStateBits execution_state_bits = 7;
  uint64 memory_allocation = 8;
  // This field is now deprecated. Once all subnets in production contain the
  // new version of this field, we can remove it (and mark it as reserved).
  // (EXC-299) With this change, CyclesAccount can also be removed.
  CyclesAccount cycles_account = 9;
  reserved 10;
  reserved "icp_balance";
  oneof canister_status {
    CanisterStatusRunning running = 11;
    CanisterStatusStopping stopping = 12;
    CanisterStatusStopped stopped = 13;
  };
  reserved 14;
  reserved "scheduled_to_run";
  uint64 scheduled_as_first = 15;
  reserved 16;
  reserved "skipped_round_due_to_low_cycles";
  uint64 skipped_round_due_to_no_messages = 17;
  // In how many rounds a canister is executed.
  uint64 executed = 18;
  reserved 19;
  reserved "executed_and_exhausted_its_messages";
  bytes certified_data = 20; 
  uint64 interruped_during_execution = 21;
  types.v1.NominalCycles consumed_cycles_since_replica_started = 22;
  uint64 freeze_threshold = 23;
  uint32 stable_memory_size = 24;
  repeated types.v1.PrincipalId controllers = 25;
  state.queues.v1.Cycles cycles_balance = 26;
}
