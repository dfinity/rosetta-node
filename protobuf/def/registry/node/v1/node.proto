syntax = "proto3";
package registry.node.v1;

// A connection endpoint.
message ConnectionEndpoint {
  enum Protocol {
    PROTOCOL_UNSPECIFIED = 0;
    PROTOCOL_HTTP1 = 1;
    PROTOCOL_HTTP1_TLS_1_3 = 2;
    PROTOCOL_P2P1_TLS_1_3 = 3;
  }

  // The IP address. Senders SHOULD use dotted-quad notation for IPv4 addresses
  // and RFC5952 representation for IPv6 addresses (which means that IPv6
  // addresses are *not* enclosed in `[` and `]`, as they are not written
  // with the port in the same field).
  //
  // Clients MUST be prepared to accept IPv6 addresses in the forms shown in
  // RFC4291.
  string ip_addr = 1;
  uint32 port = 2;

  // Protocol that is used on this endpoint. If PROTOCOL_UNSPECIFIED then
  // code should default to PROTOCOL_HTTP1 for backwards compatability.
  Protocol protocol = 4;
}

message FlowEndpoint {
  // The flow identifier (tag). This has to be unique per NodeRecord.
  uint32 flow_tag = 1;

  // The IP/port for this flow.
  ConnectionEndpoint endpoint = 2;
}

// A node: one machine running a replica instance.
message NodeRecord {
  // the node_id is redundant as it is already contained in the key for this
  // value.
  reserved 1;
  reserved "node_id";
  reserved 2;
  reserved "gossip_advert";
  reserved 3;
  reserved "gossip_request";
  reserved 4;
  reserved "gossip_artifact";

  // The endpoint where this node receives xnet messages.
  ConnectionEndpoint xnet = 5;

  // The endpoint where this node receives http requests.
  ConnectionEndpoint http = 6;

  reserved 7;
  reserved "transport_tls_certificate";

  // The P2P flow end points.
  repeated FlowEndpoint p2p_flow_endpoints = 8;

  reserved 9;
  reserved "dcop_principal_id";

  // Endpoint where the node provides Prometheus format metrics over HTTP
  ConnectionEndpoint prometheus_metrics_http = 10;

  // Endpoints on which the public API is served.
  repeated ConnectionEndpoint public_api = 11;

  // Endpoints on which private APIs are served.
  repeated ConnectionEndpoint private_api = 12;

  // Endpoints on which metrics compatible with the Prometheus export
  // format are served.
  repeated ConnectionEndpoint prometheus_metrics = 13;

  // Endpoints on which the XNet API is served
  repeated ConnectionEndpoint xnet_api = 14;
  
  // The id of the node operator that added this node.
  bytes node_operator_id = 15;
}
